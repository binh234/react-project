import React, { useEffect, useState } from 'react'
import Card from '../components/Card'
import FormField from '../components/FormField'
import Loader from '../components/Loader'

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />)
  }

  return <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
}

const Home = () => {
  const [loading, setLoading] = useState(false)
  const [allPost, setAllPost] = useState([])
  const [searchText, setSearchText] = useState('')
  const [searchResults, setSearchResults] = useState([])
  const [searchTimeout, setSearchTimeout] = useState(null)

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout)
    setSearchText(e.target.value)
    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPost.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        )
        setSearchResults(searchResults)
      }, 500)
    )
  }

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true)

      try {
        const response = await fetch('http://localhost:8080/api/v1/post', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/jon',
          },
        })
        if (response.ok) {
          const result = await response.json()
          setAllPost(result.data.reverse())
        }
      } catch (error) {
      } finally {
        setLoading(false)
      }
    }
    fetchPosts()
  }, [])

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-3xl">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] text-base max-w-[500px]">
          Browse through a collection of imaginative and visually stunning images generated by
          DALL-E AI
        </p>
      </div>
      <div className="mt-12">
        <FormField 
          labelName="Search post"
          type="text"
          name="text"
          placeholder="Search posts"
          value={searchText}
          handleChange={handleSearchChange}
        />

      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing resutls for <span className="text-[$222328]">{searchText}</span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchResults} title="No search results found" />
              ) : (
                <RenderCards data={allPost} title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home
